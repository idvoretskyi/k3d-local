name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  TF_VERSION: "1.6.0"

jobs:
  # Validate release readiness
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup OpenTofu
      uses: opentofu/setup-opentofu@v1
      with:
        tofu_version: ${{ env.TF_VERSION }}

    - name: Run full validation
      run: |
        # Run unit tests
        chmod +x tests/run_tests.sh
        cd tests/ && ./run_tests.sh
        
        # Validate OpenTofu configuration
        cd ../tf/
        tofu init -backend=false
        tofu validate
        tofu fmt -check

    - name: Check version consistency
      if: github.event_name == 'push'
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        echo "Release version: $VERSION"
        
        # Validate version format
        if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
          echo "Invalid version format: $VERSION"
          echo "Expected format: v1.0.0 or v1.0.0-beta"
          exit 1
        fi

    - name: Verify documentation is up to date
      run: |
        # Check that README mentions current features
        if ! grep -q "tf/" README.md; then
          echo "README.md doesn't mention tf/ directory structure"
          exit 1
        fi
        
        if ! grep -q "make" README.md; then
          echo "README.md doesn't mention Make targets"
          exit 1
        fi
        
        if ! grep -q "tests/" README.md; then
          echo "README.md doesn't mention testing"
          exit 1
        fi

  # Create GitHub release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: validate-release
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for changelog

    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"

    - name: Generate changelog
      id: changelog
      run: |
        # Create a simple changelog from git commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -n "$LAST_TAG" ]; then
          echo "## Changes since $LAST_TAG" > CHANGELOG.md
          git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" >> CHANGELOG.md
        else
          echo "## Initial Release" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "This is the first release of k3d-local." >> CHANGELOG.md
        fi
        
        echo "" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## Features" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "- 🚀 Automated k3d cluster provisioning with OpenTofu" >> CHANGELOG.md
        echo "- 🍎 macOS optimized using Colima (no Docker Desktop required)" >> CHANGELOG.md
        echo "- ⚙️ Configurable cluster size, resources, and port mappings" >> CHANGELOG.md
        echo "- 🌐 LoadBalancer access for easy service exposure" >> CHANGELOG.md
        echo "- 📊 Complete monitoring stack (Prometheus, Grafana, Alertmanager)" >> CHANGELOG.md
        echo "- 💾 Persistent storage for monitoring data and applications" >> CHANGELOG.md
        echo "- 🔧 Development-friendly volume mounts and environment variables" >> CHANGELOG.md
        echo "- 🧪 Comprehensive testing with unit and integration tests" >> CHANGELOG.md
        echo "- 📚 Well-documented with examples and troubleshooting guides" >> CHANGELOG.md
        echo "- 🔄 Make integration for streamlined workflows" >> CHANGELOG.md
        
        # Add usage section
        echo "" >> CHANGELOG.md
        echo "## Quick Start" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo '```bash' >> CHANGELOG.md
        echo "# Download and extract the release" >> CHANGELOG.md
        echo "curl -LO https://github.com/\${{ github.repository }}/archive/refs/tags/\${{ steps.version.outputs.version }}.tar.gz" >> CHANGELOG.md
        echo "tar -xzf \${{ steps.version.outputs.version }}.tar.gz" >> CHANGELOG.md
        echo "cd k3d-local-*/" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "# Setup and deploy" >> CHANGELOG.md
        echo "make setup" >> CHANGELOG.md
        echo "colima start --cpu 4 --memory 8" >> CHANGELOG.md
        echo "make init" >> CHANGELOG.md
        echo "make apply" >> CHANGELOG.md
        echo '```' >> CHANGELOG.md
        
        # Store changelog for the release
        cat CHANGELOG.md

    - name: Create Release Archive
      run: |
        # Create a clean release archive without git history and CI files
        mkdir -p release-artifacts
        
        # Copy essential files
        cp -r tf/ release-artifacts/
        cp -r tests/ release-artifacts/
        cp README.md LICENSE CONTRIBUTING.md Makefile release-artifacts/
        
        # Create tarball
        cd release-artifacts
        tar -czf ../k3d-local-${{ steps.version.outputs.version }}.tar.gz .
        cd ..
        
        # Create zip file
        cd release-artifacts  
        zip -r ../k3d-local-${{ steps.version.outputs.version }}.zip .
        cd ..
        
        # Generate checksums
        sha256sum k3d-local-${{ steps.version.outputs.version }}.tar.gz > k3d-local-${{ steps.version.outputs.version }}.tar.gz.sha256
        sha256sum k3d-local-${{ steps.version.outputs.version }}.zip > k3d-local-${{ steps.version.outputs.version }}.zip.sha256

    - name: Create GitHub Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: k3d-local ${{ steps.version.outputs.version }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ github.event.inputs.prerelease || false }}

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./k3d-local-${{ steps.version.outputs.version }}.tar.gz
        asset_name: k3d-local-${{ steps.version.outputs.version }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload Release Assets (ZIP)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./k3d-local-${{ steps.version.outputs.version }}.zip
        asset_name: k3d-local-${{ steps.version.outputs.version }}.zip
        asset_content_type: application/zip

    - name: Upload Checksums (tar.gz)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./k3d-local-${{ steps.version.outputs.version }}.tar.gz.sha256
        asset_name: k3d-local-${{ steps.version.outputs.version }}.tar.gz.sha256
        asset_content_type: text/plain

    - name: Upload Checksums (zip)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./k3d-local-${{ steps.version.outputs.version }}.zip.sha256
        asset_name: k3d-local-${{ steps.version.outputs.version }}.zip.sha256
        asset_content_type: text/plain

  # Post-release tasks
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: create-release
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Update development version
      run: |
        echo "Release ${{ needs.create-release.outputs.version }} created successfully!"
        echo ""
        echo "Next steps for maintainers:"
        echo "1. Update documentation if needed"
        echo "2. Consider updating example configurations"
        echo "3. Monitor for issues and feedback"
        echo ""
        echo "Users can now install with:"
        echo "curl -LO https://github.com/${{ github.repository }}/releases/download/${{ needs.create-release.outputs.version }}/k3d-local-${{ needs.create-release.outputs.version }}.tar.gz"

  # Test the release (smoke test)
  test-release:
    name: Test Release
    runs-on: ubuntu-latest
    needs: create-release
    if: success()
    timeout-minutes: 15
    
    steps:
    - name: Download release artifact
      run: |
        # Download the release we just created
        curl -LO "https://github.com/${{ github.repository }}/releases/download/${{ needs.create-release.outputs.version }}/k3d-local-${{ needs.create-release.outputs.version }}.tar.gz"
        curl -LO "https://github.com/${{ github.repository }}/releases/download/${{ needs.create-release.outputs.version }}/k3d-local-${{ needs.create-release.outputs.version }}.tar.gz.sha256"

    - name: Verify checksum
      run: |
        sha256sum -c k3d-local-${{ needs.create-release.outputs.version }}.tar.gz.sha256

    - name: Extract and test
      run: |
        tar -xzf k3d-local-${{ needs.create-release.outputs.version }}.tar.gz
        cd k3d-local-*/
        
        # Verify structure
        test -f Makefile
        test -d tf/
        test -d tests/
        test -f README.md
        test -f LICENSE
        
        # Test basic functionality
        make help
        chmod +x tests/run_tests.sh
        
        echo "✅ Release archive verified successfully!"